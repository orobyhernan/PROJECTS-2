Â·This is a Python file
import hashlib 
#first let's set the function that creates a phone password

def create_phone_password():
    phone_password = input('Please enter a new password for your phone: ')
    return phone_password

#Now we will create the riddle function with the encryption system, We will use the hash 256
#encryption system to encrypt the answer to the riddle and generate a hash 256 code. 
#Note that this is an encrypted code and we need it to transform it into hexadecimal system
#so it can be read, copied and pasted

def create_password():
    riddle = 'I speak without a mouth and hear without ears. I have no body, but I come alive with the wind. What am I?'
    answer = "an echo"
    hashed_answer = hashlib.sha256(answer.encode()).hexdigest()
    return riddle, hashed_answer
#the hashlib function assigned to the "hashed_answer" variable is basically running the answer "an echo" though a hash 256 system that
#turns it into a code than can be read by the computer while encrypted, this is achieved by the 
#encode() function, then, in order to be turned into a hexadecimal combination of letter a- z
#and numbers 0-9 than can be read, copied and pasted by a human, it will be translated by the hexdigest() function 


#Now we will run the main function that propmts the user to input the solution to the riddle 

def main():
    phone_password = create_phone_password()
    print('Not so fast !!! Looks like an encrypted code is required in order to access this phone. You will have to unlock the code by providing the answer for a riddle. Here is the riddle: ')
    #now we will call the values riddle so it gives us the riddle to solve
    #and we assign the function that creates the riddle to a value "correct answer hash" 
    #so we can use it later on
    riddle, correct_answer_hash = create_password()
    print(riddle)
    
    
    #now we prompt the user to input his/her answer to the riddle
    user_answer = input('Enter your answer: ')
    
    #and let's set the conditions
    
    if user_answer.lower() == "an echo":
        print('Correct! Here is the encrypted code, remember that you will have to input it after you input your password:')
        print('Code: ', correct_answer_hash)
        #the correct answer hash variable here is assigned to the function that has the riddle
        #the answer and the encryption system so that the function de-encrypts the code and generates the hexadecimal version of it for our use.
        
        #Now that we have acquired our de-encrypted code we will return the phone
        #password function in order to input the phone password
        return phone_password, correct_answer_hash
    else:
        print('Incorrect answer, system blocked')
        return None, None
    
#In the main block, I added a call to main() to get the phone_password 
#and correct_answer_hash values.
if __name__ == '__main__':
    phone_password, correct_answer_hash = main()


    
if phone_password and correct_answer_hash:   #we have added both variables here for the if function to check that they exist and are available before proceeding with the authentication process
    max_attempts = 3 #max no. of attempts for the phone password input
    
    print("Now yes !! First, enter the phone password you created before: ") #This is printed once we have obtained the de-encrypted code before, it's a prompt that indicates we are going to proceed with the phone authentication three max attempt system
    for attempt in range(max_attempts):
        user_attempt = input("Please enter password: ") #this is the user inputing a password
        if user_attempt == phone_password: #here "phone_password" is the variable from the function "create_phone_password" that we used to initially create a password for the phone at the beggining of all the code
            print("Correct! Now you'll need the encrypted code provided before") #we write this because once the correct password is inputed, it will take us straight to the de-encrypted code authentication loop
            break
        else:
            attempts_number = max_attempts - attempt - 1 #this is an arithmetical operation that sets the display for the attempts we have remaining if we input the incorrect password
            if attempts_number > 0: #we set this so once we reach zero attempts it doesn't display a message saying how many attempts we have left, but rather tells us the system is blocked with the line below
                print("Wrong password", attempts_number, "attempts remaining")
            else:
                print("Max attempts reached. System blocked you wanna-be hacker")
#now the same authenticacion system for the de-encrypted code, same max number of atttempts
    max_encrypted_attempts = 3

    for attempt_encrypted in range(max_encrypted_attempts):
        user_hash_attempt = input('Please enter the encrypted code: ')
        if user_hash_attempt == correct_answer_hash: #this is the variable assigned to the "create_password()" function that de-encrypted the answer to the riddle and generated the hexadecimal code
            print("Now you have access to this phone full of memes and dirty secrets")
            break
        else:
            hashed_attempts_number = max_encrypted_attempts - attempt_encrypted - 1 #same system to calculate and display the number of attempts left for the code input
            if hashed_attempts_number > 0: #same system to prevent it from displaying number of attempts left once we reach max attempts and straight up tells us the system is blocked instead
                print("Wrong code", hashed_attempts_number, 'attempts remaining, come on bro, it is just copy and paste')
            else:
                print("Max attempts reached, this phone is blocked you wanna-be hacker")
